id: ass
version: v0.4.0
name: Aegisub
scopeName: source.ass
fileTypes:
  - ass
  - ssa
uuid: 90101069-65f0-4834-a2fa-faad3b9d1400
information_for_contributors:
  - 'aster: 19260817@qq.com'
patterns:
  - include: '#comment'
  - include: '#block'
  - include: '#tags'
  - include: '#invalid'
repository:
  comment:
    patterns:
      - begin: (^[ \t]+)?(?=;)
        beginCaptures:
          '1': {name: punctuation.whitespace.comment.leading.ass}
        end: (?!\G)
        patterns:
          - begin: ;
            beginCaptures:
              '0': {name: punctuation.definition.comment.ass}
            end: "[\r\n]"
            name: comment.line.semicolon.ass
      - begin: (Comment)(:)
        beginCaptures:
          '1': {name: punctuation.definition.comment.ass}
          '2': {name: punctuation.definition.keyValue.ass}
        end: "[\r\n]"
        name: comment.line.ass
  tags:
    patterns:
      - begin: (?:^[ \t]+)?(Format)(:)
        beginCaptures:
          '1': {name: entity.name.tag.ass}
          '2': {name: punctuation.definition.keyValue.ass}
        end: "[\r\n]"
        patterns:
          - match: \,
            name: punctuation.separator.ass
          - match: ([a-zA-Z])
            name: storage.type.ass
      - begin: (?:^[ \t]+)?(Style|Dialogue)(:)
        beginCaptures:
          '1': {name: entity.name.tag.ass}
          '2': {name: punctuation.definition.keyValue.ass}
        end: "[\r\n]"
        patterns:
          - include: '#function'
          - include: '#literal'
      - begin: (?:^[ \t]+)?([A-Za-z\s]*)(:)
        beginCaptures:
          '1': {name: entity.name.tag.ass}
          '2': {name: punctuation.definition.keyValue.ass}
        end: "[\r\n]"
        patterns:
          - include: '#literal'
          - include: '#invalid'
  block:
    patterns:
      - match: (?:^[ \t]+)?(\[)(.*)(\])
        name: entity.name.section.group-title.ass
        captures:
          '1': {name: punctuation.definition.entity.ass}
          '3': {name: punctuation.definition.entity.ass}
  literal:
    patterns:
      - match: \,
        name: punctuation.separator.ass
      - match: (\\)(n|N|h)
        name: support.type.primitive.ass
      - match: \d*:[0-5][0-9]:[0-5][0-9]\.\d{2}
        name: support.function.time.ass
      - match: \&H[0-9A-F]+
        name: support.function.color.ass
      - match: -?\d+(\.\d*)?
        name: constant.numeric.ass
      - match: "[^,\r\n]*"
        name: string.literal.ass
  function:
    patterns:
      - name: support.type.primitive.ass
        begin: "\{"
        end: "\}"
        patterns:
          - include: '#functions'
  functions:
    patterns:
      - match: (\\)(s|u|i|b|k|K|an|be|bord|blur|fs|fsp|fscx|fscy|frx|fry|frz|fe|shad|ko|kf|xbord|ybord|xshad|yshad)([0-9+-\.]+)
        captures:
          '3': {name: constant.numeric.ass}
      - match: (\\)(1a|2a|3a|4a|1c|2c|3c|4c)(\&.*\&)
        captures:
          '3': {name: support.function.color.ass}
      - match: (\\)(fn|r)([^{}]+)
        captures:
          '3': {name: string.literal.ass}
      - begin: (\\)(t|clip|iclip|fad|fade|move|org|pos)(\()
        end: (\))
        patterns:
          - match: \,
            name: punctuation.separator.ass
          - match: ([0-9]+)
            name: constant.numeric.ass
          - match: ([a-zA-Z]+)
            name: support.type.primitive.ass
          - include: '#functions'
  invalid:
    patterns:
      - match: (.*)
        name: invalid.illegal.lyric
